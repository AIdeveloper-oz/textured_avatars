//
// Created by alexander on 08.11.18.
//
#include "stickman.hpp"
#include <stdio.h>
#include <stdlib.h>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

float random_based(int max_int) {
    return rand() % max_int + rand() / float(RAND_MAX);
}

void float_to_uchar(float *input, int chnum, int w, int h, std::vector<cv::Mat> &out_imgs, float scaling = 255) {
//	out_imgs = std::vector<cv::Mat>(chnum, );
    out_imgs.clear();
    for (int ch_id = 0; ch_id < chnum; ch_id++) {
        cv::Mat img = cv::Mat::zeros(h, w, CV_8UC1);
        for (int j = 0; j < h; j++) {
            for (int i = 0; i < w; i++) {
                img.at<uchar>(j, i) = (uchar) (scaling * input[ch_id * w * h + j * w + i]);
                if (input[ch_id * w * h + j * w + i] > 0) {
//                    std::cout << " input nonzero " << ch_id << " " << i << " " << j << std::endl;
//                    std::cout << 255*input[ch_id*w*h + j*w + i] << " " << (int) img.at<uchar>(j, i) << std::endl;
                }
            }
        }
        out_imgs.push_back(img);
    }
}

void test_draw_line() {
    int chnum = 5;
    int w = 500;
    int h = 250;
    int map_size = w * h * chnum;
    float *output = new float[map_size];
    int test_num = 10;
    int bw = 3;
    for (int ti = 0; ti < test_num; ti++) {
        for (int i = 0; i < map_size; i++) {
            output[i] = 0.0;
        }
        LineT line;
        line.x1 = random_based(w);
        line.y1 = random_based(h);
        line.x2 = random_based(w);
        line.y2 = random_based(h);
        float val = 0.7;//rand() / float(RAND_MAX);
        StickmanData_C st;
        int chid = rand() % chnum;
        std::cout << " dl call " << std::endl;
        st.drawLine(line, chid, bw, w, h, val, output);

        std::vector<cv::Mat> imgs;
        float_to_uchar(output, chnum, w, h, imgs);

        imgs[chid].at<uchar>((int) floor(line.y1 + 0.5), (int) floor(line.x1 + 0.5)) = 0;
        imgs[chid].at<uchar>((int) floor(line.y2 + 0.5), (int) floor(line.x2 + 0.5)) = 0;

        for (int im_id = 0; im_id < imgs.size(); im_id++) {
            cv::imwrite(
                    "/home/alexander/materials/violet/stickman-drawer-master/test/" + std::to_string(im_id) + ".png",
                    imgs[im_id]);
        }
        cv::imshow(std::to_string(chid), imgs[chid]);
        std::cout << chid << ": " << 255 * val << " (" << line.x1 << " " << line.y1 << " ) " << " (" << line.x2 << " "
                  << line.y2 << " )" << " " << std::endl;
        cv::waitKey(0);
    }
}

void drawsummary_pose_anotation(const std::vector<float> &input, const std::vector<cv::Mat> &out_imgs, bool is_07,
                                cv::Mat *summary_img) {
    *summary_img = cv::Mat::zeros(out_imgs[0].size(), CV_8UC3);
    for (int i = 0; i < out_imgs.size(); i++) {
        const cv::Mat &img = out_imgs[i];
        for (int y = 0; y < img.rows; y++) {
            for (int x = 0; x < img.cols; x++) {
                if (img.at<uchar>(y, x) > 0) {
                    summary_img->at<cv::Vec3b>(y, x)[0] = 255;
                }
            }
        }
    }
    int joint_num = 19;
    if (!is_07) {
        joint_num = 25;
    }
    for (int j = 0; j < joint_num; j++) {
        int x = int(input[4 * j] + 0.5);
        int y = int(input[4 * j + 1] + 0.5);
        cv::putText(*summary_img, std::to_string(j), cv::Point2i(x, y), cv::FONT_HERSHEY_COMPLEX, 0.5,
                    cv::Scalar(0, 255, 0));
    }
}

void test_stickman() {
    std::vector<float> input_07{1112.5944008796548, 420.8891068442315, 208.3740758252021, 0.666595, 1171.2325303047307,
                                277.3716206333044, 187.4212737945068, 0.509186, 1116.4049985148024, 847.3005885962275,
                                214.4549461070965, 0.357361, 1239.8933537947923, 412.9598409101634, 214.2754146239843,
                                0.613464, 1290.1377168120994, 616.4093350209916, 225.54745751890198, 0.666901,
                                1315.1745730248751, 798.9116539799954, 213.54866877969542, 0.579681, 1196.252899591731,
                                840.7616977095352, 217.6954676326638, 0.341858, 1183.7357030616736, 1125.428133868344,
                                221.936017529325, 0.530121, 1166.9782061524927, 1385.081101548033, 229.0295147729283,
                                0.641204, 982.1395571809418, 424.4661202085597, 202.57907003409565, 0.581146,
                                909.6967304667246, 655.0310448269383, 206.26511577893498, 0.556365, 992.5972788009186,
                                852.2647753414697, 196.43321550032056, 0.553894, 1033.6313000827388, 853.7650853471661,
                                211.21432760136625, 0.319458, 1047.854216100043, 1151.6649918841308, 216.02686340154702,
                                0.518738, 1041.6677411059325, 1424.325642314554, 221.59336596771135, 0.658325,
                                1181.926444997172, 245.90640653733232, 189.84684541828386, 0.438385, 1181.0494507729597,
                                260.2428697430617, 200.7212991422656, 0.576507, 1135.641835599891, 252.74280967580142,
                                187.9589441133246, 0.312592, 1064.5851477696863, 269.42928195286646, 196.13046495550321,
                                0.413421, 1157.5193557284927, 257.04519574474955, 186.85499556014673, 0.379742,
                                1173.0612069907963, 271.30934118198337, 186.47043275504197, 0.345014,
                                1081.3408488295356, 293.62332058678066, 195.25293936936953, 0.576457, 1088.453744630708,
                                312.5617986806719, 195.27129093286652, 0.570716, 1103.1034595931478, 333.0214954939292,
                                194.96239177295558, 0.599106, 1118.3483495104288, 343.13550185511923,
                                193.51787147874353, 0.577842, 1139.514016317304, 343.0468402087897, 190.94515995430106,
                                0.344428, 1157.096191185354, 356.74792542759997, 191.28524086323168, 0.581381,
                                1160.3619271836342, 355.65106359680954, 191.60677213196715, 0.612386, 1178.317775220573,
                                351.7369189480451, 192.25907580963082, 0.446721, 1180.6215413849181, 348.6555913120221,
                                194.61387411597758, 0.535145, 1181.3715200979732, 336.9194007264455, 196.92020364109123,
                                0.66441, 1184.6472547385206, 322.8930976117645, 198.37951158239312, 0.640848,
                                1184.5468395489263, 305.72036714562387, 199.53111400066916, 0.650158,
                                1183.0527582235904, 280.17234168624856, 187.20162316803513, 0.348833,
                                1181.6828530776709, 270.5895965531669, 186.73306398486957, 0.264557, 1176.4796554585978,
                                268.7104716685313, 186.72542023787472, 0.271245, 1107.1502453087767, 243.15505520846227,
                                187.43657508523538, 0.67267, 1118.3615038979294, 238.33661936346562, 187.01745585831543,
                                0.740325, 1131.6719179723823, 236.51544903927112, 186.72175452137066, 0.789161,
                                1144.751043610027, 238.27265847132895, 186.51896629044887, 0.803958, 1157.067790462039,
                                241.83120799515154, 186.3681288823455, 0.773059, 1174.9838294111935, 241.45808754725084,
                                187.31445799153767, 0.808585, 1181.5502932555773, 235.53546810226072, 188.1332990248045,
                                0.807044, 1188.7147235733316, 233.18875218883147, 189.18049110525521, 0.810862,
                                1195.963385277366, 233.59539366414566, 190.58452633642207, 0.758944, 1203.8917941064826,
                                237.41642021367926, 191.79924268276386, 0.742893, 1168.466108431477, 255.5062577961296,
                                187.06217565467853, 0.784946, 1170.5699072906605, 266.3289482708519, 186.98255593216913,
                                0.80578, 1172.6518334906461, 275.6069060848084, 186.67922229907794, 0.804985,
                                1176.4844257360496, 284.8427315355105, 186.33932068837416, 0.763521, 1158.2397312931266,
                                294.3468818698075, 187.91114859943505, 0.690741, 1165.1827951044525, 296.38054558154477,
                                187.8869411507243, 0.708505, 1172.987567741557, 297.6137766016899, 187.97202821171635,
                                0.69893, 1179.0531143150415, 294.8185250184217, 188.32124489704356, 0.697536,
                                1182.9688435929154, 293.04077382943217, 188.71658586008215, 0.624885,
                                1125.0858761472623, 257.4939615888015, 187.91258750300352, 0.710834, 1131.5051405642314,
                                254.65095478238948, 187.66399887895273, 0.765428, 1139.4416036210719,
                                254.27320843156502, 187.66789161026537, 0.761031, 1145.8638686851527,
                                256.56601277915405, 187.8668876939699, 0.754757, 1139.2791997607717, 258.2020282350095,
                                187.9069984963134, 0.759648, 1131.821375849345, 258.28681464781823, 187.86910529565534,
                                0.757307, 1178.6664797058993, 255.17124761913988, 189.27864878996303, 0.752476,
                                1183.7482675992796, 252.26740641599616, 189.52454732697578, 0.767705,
                                1189.9677401955462, 251.61621100981853, 190.01931744035483, 0.773975, 1194.098112438599,
                                252.7746483652864, 190.6957542858731, 0.693075, 1189.408609779308, 254.9009718792625,
                                190.2221333234425, 0.734344, 1183.434485221818, 255.67158460370757, 189.79921051506304,
                                0.740361, 1145.5352526015495, 315.639855599062, 189.92334916637486, 0.602147,
                                1156.0154771589944, 310.22023201590684, 189.09029115001476, 0.70623, 1164.8951863585685,
                                308.30284520793924, 188.74369295093584, 0.765144, 1171.7466978154337,
                                308.56654626276156, 188.85753762714708, 0.75661, 1175.7193856403496, 306.5988931110794,
                                189.225442480705, 0.740298, 1180.722299301124, 308.4887506301086, 190.14108802781752,
                                0.672799, 1182.8355889025113, 311.31019987051525, 191.3705523835722, 0.595761,
                                1180.3564514162695, 318.4692694689878, 190.60195076055646, 0.615708, 1176.7995345470895,
                                320.5044467376287, 189.8761237746163, 0.707298, 1171.094687931532, 322.148538866591,
                                189.55986179974283, 0.73466, 1163.9980342436177, 323.4072242912876, 189.6192574736807,
                                0.734237, 1155.0383453872673, 320.7440194714163, 189.7126856353558, 0.690952,
                                1151.043095262613, 315.0408082076195, 189.8545409273073, 0.67084, 1164.9689722259914,
                                313.2958202238133, 189.06467443202314, 0.760928, 1170.9208368119175, 313.861828326262,
                                189.2387504314607, 0.770614, 1174.4186418512322, 312.28706261079907, 189.55585812253457,
                                0.741693, 1179.928094355671, 311.65536141081054, 190.91024132654638, 0.61173,
                                1174.5750226713253, 312.944513880656, 189.65872577767942, 0.70992, 1170.9687177528258,
                                314.81172676869903, 189.30835922891478, 0.785124, 1164.3849896668219, 314.8866335177797,
                                189.22797228161312, 0.746922, 1134.5750163757525, 255.60707242780956,
                                187.97138579679722, 0.77947, 1185.3192599750673, 253.1109471531205, 189.93597070505143,
                                0.707751, 996.154971954448, 855.6595808417828, 196.3372743556299, 0.719353,
                                1020.4925246373599, 876.2400201687681, 196.62129961925592, 0.721037, 1041.8125276642368,
                                899.6663577551342, 196.45366638869248, 0.667546, 1048.6929909993469, 925.4770557191309,
                                196.58548089694077, 0.482894, 1049.1673973578472, 945.3616034798977, 196.87958595473066,
                                0.391518, 1042.9107006923473, 927.50395456347, 193.53936893891114, 0.670727,
                                1049.3893497689503, 959.399884616505, 194.30832161298798, 0.670348, 1046.838833918109,
                                975.738437800552, 196.10758703944379, 0.628683, 1048.159216685591, 988.367963672162,
                                197.40790306494574, 0.530859, 1024.8773688902995, 932.3119749247342, 192.89598833286334,
                                0.814808, 1030.3335771202396, 964.1634095066452, 194.3514995304555, 0.760224,
                                1030.2381610918799, 979.8171456966738, 196.47751177944437, 0.723183, 1031.6748653087866,
                                992.877552796909, 197.96151956551154, 0.672585, 1005.248889768622, 931.2750493795345,
                                193.0971817762384, 0.80074, 1007.2248600390872, 960.4088420198071, 194.39701931989214,
                                0.703076, 1008.4607777964108, 975.6064962823373, 196.44958565225258, 0.746796,
                                1009.463640208405, 986.7621311363889, 197.9602367372904, 0.678752, 984.614643616263,
                                926.1264963790316, 193.7550504283837, 0.757353, 983.9326418643639, 953.0771095365942,
                                194.8391891155178, 0.772918, 983.7061323342548, 966.1967888316539, 195.93464750291892,
                                0.764095, 984.4631878286149, 976.8746884388601, 196.79331351677843, 0.706668,
                                1313.628550139862, 812.0803857993096, 213.1278455425137, 0.700375, 1298.9357733297986,
                                824.8675960370043, 211.78337946133058, 0.771737, 1283.0078645740464, 841.2329798245039,
                                210.4556299272725, 0.7046, 1280.2186602699855, 855.7186174291863, 209.53204992437406,
                                0.706362, 1279.1651393709599, 864.5254890187662, 208.92110313701158, 0.474297,
                                1299.5928972618656, 880.186793302858, 210.70271081676313, 0.717298, 1298.2840799047106,
                                912.1808293778245, 210.76694855851707, 0.765075, 1294.895269394798, 933.9828972326577,
                                211.11312201237166, 0.851691, 1292.2679208019642, 950.2180570180943, 211.5517532071471,
                                0.726754, 1308.5673546394578, 880.0471058776235, 212.15559163512523, 0.819802,
                                1302.0427408165037, 909.91959451127, 213.42526807088723, 0.795273, 1293.425614539743,
                                930.1562642526067, 214.60967406144894, 0.790372, 1287.2890049656323, 946.7552827514321,
                                215.60111779910932, 0.691395, 1311.6691727119214, 873.8257366719978, 213.89024581613498,
                                0.774625, 1301.6557642087596, 897.6442774151005, 215.64638227350986, 0.703266,
                                1289.277442233954, 912.8056231578491, 217.14297105307222, 0.780561, 1280.411621545661,
                                925.0039533043341, 218.39358029412844, 0.69401, 1311.3354249345086, 863.7442873067695,
                                215.95389857719798, 0.734335, 1298.4569800754462, 884.9332171206256, 217.0833028971213,
                                0.712813, 1286.9125588310803, 895.2954678381927, 217.77065000739674, 0.672807,
                                1278.0866105629593, 903.5033272822757, 218.38192192268914, 0.615517};
    std::vector<float> input_12{250.205, 244.92, 150.0, 0.891905, 289.14, 345.821, 150.0, 0.848393, 209.526, 347.601,
                                150.0, 0.716483, 216.526, 515.896, 150.0, 0.804544, 244.901, 455.696, 150.0, 0.810156,
                                361.762, 337.036, 150.0, 0.782214, 400.766, 480.526, 150.0, 0.691999, 446.901, 602.753,
                                150.0, 0.532841, 315.747, 595.629, 150.0, 0.500065, 264.462, 600.903, 150.0, 0.469558,
                                0.0, 0.0, 150.0, 0.0, 0.0, 0.0, 150.0, 0.0, 360.062, 592.072, 150.0, 0.489597, 0.0, 0.0,
                                150.0, 0.0, 0.0, 0.0, 150.0, 0.0, 234.24, 234.343, 150.0, 0.924711, 264.458, 221.89,
                                150.0, 0.871601, 223.652, 257.3, 150.0, 0.394619, 305.208, 232.543, 150.0, 0.888332,
                                0.0, 0.0, 150.0, 0.0, 0.0, 0.0, 150.0, 0.0, 0.0, 0.0, 150.0, 0.0, 0.0, 0.0, 150.0, 0.0,
                                0.0, 0.0, 150.0, 0.0, 0.0, 0.0, 150.0, 0.0, 225.141, 235.057, 150.0, 0.397346, 226.458,
                                244.718, 150.0, 0.43941, 227.775, 254.38, 150.0, 0.684459, 231.289, 264.919, 150.0,
                                0.674234, 237.876, 274.58, 150.0, 0.629469, 245.341, 282.924, 150.0, 0.687846, 252.367,
                                290.389, 150.0, 0.721425, 261.15, 296.538, 150.0, 0.735414, 270.372, 296.977, 150.0,
                                0.753849, 282.668, 293.024, 150.0, 0.732154, 291.451, 285.12, 150.0, 0.664686, 300.234,
                                275.019, 150.0, 0.67982, 304.626, 261.845, 150.0, 0.641104, 304.187, 249.988, 150.0,
                                0.662207, 301.552, 236.814, 150.0, 0.68687, 299.356, 225.396, 150.0, 0.613416, 297.16,
                                213.1, 150.0, 0.525291, 218.993, 228.909, 150.0, 0.427062, 220.31, 225.396, 150.0,
                                0.539262, 224.262, 224.518, 150.0, 0.623645, 230.849, 223.2, 150.0, 0.605952, 237.437,
                                223.2, 150.0, 0.637612, 248.415, 219.248, 150.0, 0.551961, 255.002, 215.296, 150.0,
                                0.579765, 262.907, 212.222, 150.0, 0.810831, 270.372, 209.587, 150.0, 0.758015, 279.155,
                                210.026, 150.0, 0.720878, 245.341, 229.348, 150.0, 0.77882, 246.219, 233.74, 150.0,
                                0.760829, 247.976, 239.01, 150.0, 0.722261, 247.976, 243.84, 150.0, 0.64492, 245.341,
                                253.94, 150.0, 0.745632, 248.415, 253.94, 150.0, 0.837074, 252.367, 253.94, 150.0,
                                0.944122, 255.881, 250.866, 150.0, 0.928612, 259.833, 247.792, 150.0, 0.80018, 227.336,
                                230.666, 150.0, 0.22977, 228.654, 228.909, 150.0, 0.240276, 232.606, 228.909, 150.0,
                                0.287156, 235.68, 229.788, 150.0, 0.324145, 233.045, 234.179, 150.0, 0.235508, 229.971,
                                230.666, 150.0, 0.22302, 260.711, 226.714, 150.0, 0.794961, 264.664, 224.957, 150.0,
                                0.798826, 269.494, 222.761, 150.0, 0.915046, 273.446, 222.761, 150.0, 0.880991, 269.933,
                                225.396, 150.0, 0.901984, 265.542, 226.274, 150.0, 0.852015, 247.537, 271.067, 150.0,
                                0.785509, 246.219, 264.919, 150.0, 0.820663, 250.172, 260.528, 150.0, 0.824481, 255.002,
                                259.21, 150.0, 0.891423, 259.394, 257.454, 150.0, 0.919195, 269.494, 255.258, 150.0,
                                0.84818, 280.034, 258.332, 150.0, 0.887983, 274.764, 269.311, 150.0, 0.738288, 267.738,
                                275.459, 150.0, 0.788737, 262.468, 278.533, 150.0, 0.908385, 257.198, 278.972, 150.0,
                                0.88025, 251.928, 276.337, 150.0, 0.840246, 248.854, 269.75, 150.0, 0.820335, 251.928,
                                264.48, 150.0, 0.872583, 255.881, 261.406, 150.0, 0.91211, 261.15, 260.089, 150.0,
                                0.772436, 277.399, 260.089, 150.0, 0.851873, 265.981, 269.75, 150.0, 0.765379, 260.272,
                                271.945, 150.0, 0.833645, 255.441, 272.385, 150.0, 0.861236, 230.849, 226.714, 150.0,
                                0.220471, 266.859, 224.518, 150.0, 0.808365, 453.397, 627.269, 150.0, 0.278358, 463.761,
                                645.816, 150.0, 0.0509088, 470.307, 654.544, 150.0, 0.0246442, 479.035, 657.817, 150.0,
                                0.0133713, 490.491, 657.271, 150.0, 0.00935346, 482.308, 647.452, 150.0, 0.0187719,
                                495.4, 655.089, 150.0, 0.0106762, 495.945, 660.544, 150.0, 0.00806869, 503.037, 659.999,
                                150.0, 0.00666929, 485.036, 653.998, 150.0, 0.00925251, 498.127, 652.907, 150.0,
                                0.00783851, 493.763, 659.999, 150.0, 0.00626317, 499.764, 662.726, 150.0, 0.00554207,
                                483.399, 652.907, 150.0, 0.00859671, 498.673, 650.725, 150.0, 0.00632411, 491.036,
                                658.908, 150.0, 0.00754128, 495.4, 667.636, 150.0, 0.00545875, 469.216, 644.725, 150.0,
                                0.0125137, 464.852, 649.634, 150.0, 0.0108859, 498.127, 617.996, 150.0, 0.00716481,
                                499.764, 618.541, 150.0, 0.00544391, 243.761, 422.236, 150.0, 0.059692, 222.751,
                                427.797, 150.0, 0.0516096, 225.223, 429.033, 150.0, 0.142652, 222.133, 403.698, 150.0,
                                0.134593, 221.515, 398.755, 150.0, 0.0525131, 251.176, 417.292, 150.0, 0.333397,
                                242.525, 394.429, 150.0, 0.104325, 232.638, 384.542, 150.0, 0.102374, 229.548, 376.509,
                                150.0, 0.128357, 253.647, 420.382, 150.0, 0.265201, 238.817, 397.519, 150.0, 0.114569,
                                228.93, 387.014, 150.0, 0.183188, 221.515, 379.599, 150.0, 0.110774, 255.501, 433.976,
                                150.0, 0.238547, 238.199, 398.137, 150.0, 0.112985, 223.987, 391.957, 150.0, 0.0944399,
                                216.572, 400.608, 150.0, 0.0585614, 256.119, 443.863, 150.0, 0.313705, 253.647, 460.547,
                                150.0, 0.0740894, 251.794, 464.872, 150.0, 0.0357464, 217.19, 405.552, 150.0,
                                0.0285876};
    std::vector<float> input = input_07;
    bool is_07 = true;
    bool is_separate_hands = false;
    bool is_separate_face = false;
    bool is_earneck = true;
    int w = 1920;
    int h = 1080;
    int map_num = 21;
    if (!is_07) {
        map_num += 6;
        input = input_12;
    }
    if (is_separate_hands) {
        map_num += 40 - 2;
    }
    if (is_separate_face) {
        map_num += 39 - 1;
    }
    if (is_earneck) {
        map_num += 2;
    }


    double max_z = 0;
    for (int i = 0; i < input.size() / 4; i++) {
        if (input[4 * i + 2] > max_z) {
            max_z = input[4 * i + 2];
        }
    }
    float *output_prev = new float[w * h * map_num];
    float *output_new = new float[w * h * map_num];
    StickmanData_C stickman;
    StickmanData_C stickman2(is_07, is_separate_hands, is_separate_face, is_earneck);

    int sz1 = w * h * map_num;
    int sz2 = input.size();
    std::cout << " input len " << sz2 << std::endl;
    for (int i = 0; i < w * h * map_num; i++) {
        output_prev[i] = 0.0;
        output_new[i] = 0.0;
    }
    int64 t0 = cv::getTickCount();
    stickman.drawStickman(output_prev, sz1, &input[0], sz2, w, h);
    int64 t1 = cv::getTickCount();
    stickman2.drawStickman2(output_new, sz1, &input[0], sz2, w, h, 3, 1.5);
    int64 t2 = cv::getTickCount();
    std::cout << "old: " << (t1 - t0) / cv::getTickFrequency() << " sec, new: " << (t2 - t1) / cv::getTickFrequency()
              << " sec " << std::endl;
    std::vector<cv::Mat> out_imgs_prev, out_imgs_new;

    float_to_uchar(output_prev, map_num, w, h, out_imgs_prev, 255.0 / max_z);
    float_to_uchar(output_new, map_num, w, h, out_imgs_new, 255.0 / max_z);

    std::cout << " generated " << out_imgs_new.size() << " new images " << std::endl;
    for (int i = 0; i < out_imgs_new.size(); i++) {
        if (i < 21) {
//            cv::imwrite("./test_stickman/"+std::to_string(i)+"_old.png", out_imgs_prev[i]);
        }
        cv::imwrite("./test_stickman/" + std::to_string(i) + "_new.png", out_imgs_new[i]);
    }
    cv::Mat summary;
    drawsummary_pose_anotation(input, out_imgs_new, is_07, &summary);
    cv::imwrite("./test_stickman/summary.png", summary);
}

int main() {
//    test_draw_line();
    test_stickman();
    return 0;
}